import java.util.*;
import java.io.*;
import java.text.*;

class No2{
    public Show elemento;
    public No2 dir;
    public No2 esq;
    
    public No2(Show elemento){
        this.elemento = elemento;
        this.dir = null;
        this.esq = null;
    }
}

class No{
    public int elemento;
    public No esq;
    public No dir;
    public No2 raiz;
    
    public No(int elemento){
        this.elemento = elemento;
        this.dir = null;
        this.esq = null;
        this.raiz = null;
    }
}

class ArvoreDeArvore{
    public No raiz;
    
    public ArvoreDeArvore(){
        this.raiz = null;
        int[] lista = { 7, 3, 11, 1, 5, 9, 13, 0, 2, 4, 6, 8, 10, 12, 14 };
        for(int i = 0; i < 15; i++){
            inserir(lista[i]);
        }
    }
    
    public void inserir(int x){
        raiz = inserir(x, raiz);
    }
    
    public No inserir(int x, No i) {
		if(i == null) {
		    return new No(x);
		} else if(x < i.elemento) {
			i.esq = inserir(x, i.esq);
		} else if(x > i.elemento) {
			i.dir = inserir(x, i.dir);
		} else{
		    throw new RuntimeException("Erro!");
		}
		
		return i;
	}
	
	public void inserirNaArvore(Show x){
	    int mod = x.getReleaseYear() % 15;
	    raiz = inserirNaArvore(x, raiz, mod);
	}
	
	public No inserirNaArvore(Show x, No i, int mod){
	    if (i == null) {
            return new No(mod); 
        }
	    if(mod < i.elemento) {
			i.esq = inserirNaArvore(x, i.esq, mod);
		} else if(mod > i.elemento) {
			i.dir = inserirNaArvore(x, i.dir, mod);
		} else if(mod == i.elemento){
		    i.raiz = inserir2(x, i.raiz);
		}
		
		return i;
	}
	
	public No2 inserir2(Show x, No2 i){
	    if(i == null) {
		    return new No2(x);
		} else if(x.getTitle().compareTo(i.elemento.getTitle()) < 0) {
			i.esq = inserir2(x, i.esq);
		} else if(x.getTitle().compareTo(i.elemento.getTitle()) > 0) {
			i.dir = inserir2(x, i.dir);
		} else{
		    throw new RuntimeException("Erro!");
		}
		
		return i;
	}
	
	public boolean pesquisar(String x, int[] comparacoes){
	    System.out.print("raiz ");
	    boolean resp = pesquisar(x, raiz, comparacoes);
	    System.out.println(resp ? "SIM" : "NAO");
	    return resp;
	}
	
	public boolean pesquisar(String x, No i, int[] comparacoes){
	    if (i == null) {
            return false;
        }
        if (pesquisar2(x, i.raiz, comparacoes)){
            return true;
        }
        System.out.print("ESQ ");
        comparacoes[0]++;
        if (pesquisar(x, i.esq, comparacoes)){
            return true;
        }
        System.out.print("DIR ");
        comparacoes[0]++;
        return pesquisar(x, i.dir, comparacoes);
	}
	
	public boolean pesquisar2(String x, No2 i, int[] comparacoes){
        if(i == null){
            return false;
        }else{
            comparacoes[0]++;
            if(x.compareTo(i.elemento.getTitle()) < 0){
                System.out.print("esq ");
                return pesquisar2(x, i.esq, comparacoes);
            }else if(x.compareTo(i.elemento.getTitle()) > 0){
                System.out.print("dir ");
                return pesquisar2(x, i.dir, comparacoes);
            }else{
                return true;
            } 
        }
	}
}

public class Show {
    private String showId;
    private String type;
    private String title;
    private String director;
    private String[] cast;
    private String country;
    private Date dateAdded;
    private int releaseYear;
    private String rating;
    private String duration;
    private String[] listedIn;

    public String getShowId() {
        return showId;
    }

    public void setShowId(String showId) {
        this.showId = showId;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getDirector() {
        return director;
    }

    public void setDirector(String director) {
        this.director = director;
    }

    public String[] getCast() {
        return cast;
    }

    public void setCast(String[] cast) {
        this.cast = cast;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public Date getDateAdded() {
        return dateAdded;
    }

    public void setDateAdded(Date dateAdded) {
        this.dateAdded = dateAdded;
    }

    public int getReleaseYear() {
        return releaseYear;
    }

    public void setReleaseYear(int releaseYear) {
        this.releaseYear = releaseYear;
    }

    public String getRating() {
        return rating;
    }

    public void setRating(String rating) {
        this.rating = rating;
    }

    public String getDuration() {
        return duration;
    }

    public void setDuration(String duration) {
        this.duration = duration;
    }

    public String[] getListedIn() {
        return listedIn;
    }

    public void setListedIn(String[] listedIn) {
        this.listedIn = listedIn;
    }

    public Show() {
        this.showId = "NaN";
        this.type = "NaN";
        this.title = "NaN";
        this.director = "NaN";
        this.cast = new String[]{"NaN"};
        this.country = "NaN";
        this.dateAdded = null;
        this.releaseYear = -1;
        this.rating = "NaN";
        this.duration = "NaN";
        this.listedIn = new String[]{"NaN"};
    }

    public Show(String showId, String type, String title, String director, String[] cast, String country, String dateAdded, int releaseYear, String rating, String duration, String[] listedIn) {
        this.showId = (showId != null && !showId.isEmpty()) ? showId : "NaN";
        this.type = (type != null && !type.isEmpty()) ? type : "NaN";
        this.title = (title != null && !title.isEmpty()) ? title : "NaN";
        this.director = (director != null && !director.isEmpty()) ? director : "NaN";
        this.cast = (cast != null && cast.length >= 0) ? cast : new String[]{"NaN"};
        this.country = (country != null && country.isEmpty()) ? country : "NaN";
        SimpleDateFormat data = new SimpleDateFormat("MMMM dd, yyyy");
        if (dateAdded != null && !dateAdded.isEmpty()) {
            try {
                this.dateAdded = data.parse(dateAdded);
            } catch (ParseException e) {
                System.out.println("Erro ao adicionar a data");
                this.dateAdded = null;
            }
        } else {
            this.dateAdded = null;
        }
        this.releaseYear = (releaseYear > 0) ? releaseYear : -1;
        this.duration = (duration != null && !duration.isEmpty()) ? duration : "NaN";
        this.listedIn = (listedIn != null && listedIn.length >= 0) ? listedIn : new String[]{"NaN"};
    }

    public void imprimir() {
        SimpleDateFormat data = new SimpleDateFormat("MMMM d, yyyy");
        System.out.print("=> " + getShowId());
        System.out.print(" ## " + getTitle());
        System.out.print(" ## " + getType());
        System.out.print(" ## " + getDirector());
        System.out.print(" ## " + Arrays.toString(getCast()));
        System.out.print(" ## " + getCountry());
        System.out.print(" ## " + (getDateAdded() != null ? data.format(getDateAdded()) : "NaN"));
        System.out.print(" ## " + (getReleaseYear() != -1 ? getReleaseYear() : "NaN"));
        System.out.print(" ## " + getRating());
        System.out.print(" ## " + getDuration());
        System.out.println(" ## " + Arrays.toString(getListedIn()) + " ##");
    }

    public static ArrayList<Show> ler() {
        ArrayList<Show> listaShow = new ArrayList<>();
        try (BufferedReader r = new BufferedReader(new FileReader("/tmp/disneyplus.csv"))) {
            String linha = "";
            r.readLine();
            while ((linha = r.readLine()) != null) {
                Show show = new Show();
                show.atribuir(linha);
                listaShow.add(show);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return listaShow;
    }

    public void atribuir(String linha) {
        String[] str = new String[11];
        Arrays.fill(str, "");
        str = separarLinha(linha);
        SimpleDateFormat formato = new SimpleDateFormat("MMMM dd, yyyy", Locale.ENGLISH);

        setShowId((str[0] != null) ? str[0] : "NaN");
        setType((str[1] != null) ? str[1] : "NaN");
        setTitle((str[2] != null) ? str[2] : "NaN");
        setDirector((str[3] != null) ? str[3] : "NaN");
        if (str[4] != null) {
            setCast(ordenaArray(str[4]));
        } else {
            setCast(new String[]{"NaN"});
        }
        setCountry((str[5] != null) ? str[5] : "NaN");
        try {
            if (str[6] != null && !str[6].isEmpty()) {
                Date data = formato.parse(str[6]);
                setDateAdded(data);
            } else if (str[6] == null) {
                Date data = formato.parse("March 1, 1900");
                setDateAdded(data);
            }
        } catch (Exception e) {
            System.out.println("Erro ao adicionar a data: " + str[6]);
            this.dateAdded = null;
        }
        setReleaseYear((str[7] != null) ? Integer.parseInt(str[7]) : -1);
        setRating((str[8] != null) ? str[8] : "NaN");
        setDuration((str[9] != null) ? str[9] : "NaN");
        if (str[10] != null) {
            setListedIn(ordenaArray(str[10]));
        } else {
            setListedIn(new String[]{"NaN"});
        }
    }

    public static String[] ordenaArray(String str) {
        int temp = 0, tam = 0;
        for (int i = 0; i < str.length(); i++) {
            if (str.charAt(i) == ',') {
                tam++;
            }
        }

        String[] array = new String[tam + 1];
        Arrays.fill(array, "");

        for (int i = 0; i < str.length(); i++) {
            if (str.charAt(i) != ',') {
                array[temp] += str.charAt(i);
            } else if (str.charAt(i) == ',') {
                i++; // para retirar o espaço extra
                temp++;
            }

        }

        for (int i = array.length - 1; i > 0; i--) {
            for (int j = 0; j < i; j++) {
                if (array[j].compareTo(array[j + 1]) > 0) {
                    String aux = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = aux;
                }
            }
        }
        return array;
    }

    public static String[] separarLinha(String linha) {
        String[] str = new String[11];
        Arrays.fill(str, "");
        int aux = 0, i = 0;
        while (i < linha.length() && aux != 11) {
            char letra = linha.charAt(i);
            char letra2 = 'c';
            if (i + 1 < linha.length()) {
                letra2 = linha.charAt(i + 1);
            }
            if (letra == ',' && letra2 != ' ') {
                if (str[aux] == "") {
                    str[aux] = null;
                }
                aux++;
            } else {
                if (letra != '"') {
                    str[aux] += letra;
                } else {
                    i++;
                    letra = linha.charAt(i);
                    while (i < linha.length() && linha.charAt(i) != '"') {
                        str[aux] += letra;
                        i++;
                        letra = linha.charAt(i);
                    }
                }
            }
            i++;
        }
        return str;
    }

    public Show clone() {
        Show copia = new Show();
        copia.setShowId(this.showId);
        copia.setType(this.type);
        copia.setTitle(this.title);
        copia.setDirector(this.director);
        copia.setCast(Arrays.copyOf(this.cast, this.cast.length));
        copia.setCountry(this.country);
        copia.setDateAdded(this.dateAdded != null ? new Date(this.dateAdded.getTime()) : null);
        copia.setReleaseYear(this.releaseYear);
        copia.setRating(this.rating);
        copia.setDuration(this.duration);
        copia.setListedIn(Arrays.copyOf(this.listedIn, this.listedIn.length));
        return copia;
    }
    
    public static void arquivoLog(double duracao, int[] comparacoes){
        String matricula = "1543790";
        try {
            PrintWriter w = new PrintWriter(matricula + "_arvoreArvore.txt");
            w.printf("%s\t%d\t%fms", matricula, comparacoes[0], duracao);
            w.close();
        } catch (IOException e) {
            System.err.println("Erro para escrever no arquivo de log: " + e.getMessage());
        }
    }
 
    public static void main(String[] args) {
        int[] comparacoes = {0};
        int j = 0;
        Scanner input = new Scanner(System.in);
        ArrayList<Show> listaShow = ler();
        String id = "";
        
        Show[] lista = new Show[2000];
        String[] listaPesquisa = new String[100];
        ArvoreDeArvore arvore = new ArvoreDeArvore();
        
        id = input.nextLine();
        while (!id.equals("FIM")) {
            for (int i = 0; i < listaShow.size(); i++) {
                if (listaShow.get(i).getShowId().equals(id)) {
                    lista[j] = listaShow.get(i);
                    arvore.inserirNaArvore(listaShow.get(i));
                    j++;
                }
            }
            id = input.nextLine();
        }
        
        j = 0;
        String titulo = input.nextLine();
        while (!titulo.equals("FIM")) {
            listaPesquisa[j] = titulo;
            j++;
            titulo = input.nextLine();
        }
        
        long inicioTempo = System.nanoTime();
        for(int i = 0; i < j; i++){
            arvore.pesquisar(listaPesquisa[i], comparacoes);
        }
        long fimTempo = System.nanoTime();
        
        double duracao = (fimTempo - inicioTempo) / 1_000_000.0; // em milisegundos
        //Escrever no arquivo de log
        arquivoLog(duracao, comparacoes);
        input.close();
    }
}
