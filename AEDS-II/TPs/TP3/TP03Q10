import java.util.*;
import java.io.*;
import java.text.*;

class Celula{
    public Show elemento;
    public Celula prox;
    public Celula ant;
    
    public Celula(){
        this.elemento = null;
        this.prox = null;
        this.ant = null;
    }
    
    public Celula(Show elemento){
        this.elemento = elemento;
        this.prox = null;
        this.ant = null;
    }
}

class ListaDupla {
    public Celula primeiro;
    public Celula ultimo;

    public ListaDupla() {
        primeiro = new Celula();
        ultimo = primeiro;
    }

    public int tamanho() {
        int tam = 0;
        for (Celula i = primeiro.prox; i != ultimo.prox; i = i.prox) {
            tam++;
        }
        return tam;
    }

    public void inserirFim(Show x) {
        ultimo.prox = new Celula(x);
        ultimo.prox.ant = ultimo;
        ultimo = ultimo.prox;
    }

    public void inserirInicio(Show x) {
        Celula temp = new Celula(x);
        temp.prox = primeiro.prox;
        temp.ant = primeiro;
        primeiro.prox = temp;

        if (ultimo == primeiro) {
            ultimo = temp;
        } else {
            primeiro.prox.ant = temp;
        }

        temp = null;
    }

    public void inserir(Show x, int pos) {
        int tam = tamanho();

        if (pos < 0 || pos > tam) {
            throw new RuntimeException("Erro!");
        } else if (pos == 0) {
            inserirInicio(x);
        } else if (pos == tam) {
            inserirFim(x);
        } else {
            Celula i = primeiro;
            for (int j = 0; j < pos; j++, i = i.prox);
            Celula temp = new Celula(x);
            temp.prox = i.prox;
            temp.ant = i;
            i.prox.ant = temp;
            i.prox = temp;
            i = temp = null;
        }
    }

    public Show removerFim() {
        if (ultimo == primeiro)
            throw new RuntimeException("Erro!");

        Show x = ultimo.elemento;
        ultimo = ultimo.ant;
        ultimo.prox.ant = null;
        ultimo.prox = null;
        return x;
    }

    public Show removerInicio() {
        if (ultimo == primeiro)
            throw new RuntimeException("Erro!");

        Celula temp = primeiro.prox;
        Show x = temp.elemento;
        primeiro.prox = temp.prox;

        if (temp == ultimo) {
            ultimo = primeiro;
        } else {
            temp.prox.ant = temp.ant;
        }

        temp.prox = temp.ant = null;
        temp = null;
        return x;
    }

    public Show remover(int pos) {
        Show x;
        int tam = tamanho();

        if (pos < 0 || pos >= tam) {
            throw new RuntimeException("Erro!");
        } else if (pos == 0) {
            x = removerInicio();
        } else if (pos == tam - 1) {
            x = removerFim();
        } else {
            Celula i = primeiro;
            for (int j = 0; j < pos; j++, i = i.prox);
            Celula temp = i.prox;
            x = temp.elemento;
            i.prox = temp.prox;
            temp.prox.ant = temp.ant;
            temp.ant = temp.prox = null;
            temp = null;
        }

        return x;
    }
    
    public Show pegar(int pos){
        Celula i = primeiro.prox;
        for(int j = 0; j < pos; j++, i = i.prox);
        return i.elemento;
    }
    
    public void set(int pos, Show x){
        Celula i = primeiro.prox;
        for(int j = 0; j < pos; j++, i = i.prox);
        i.elemento = x;
    }
}

public class Show {
    private String showId;
    private String type;
    private String title;
    private String director;
    private String[] cast;
    private String country;
    private Date dateAdded;
    private int releaseYear;
    private String rating;
    private String duration;
    private String[] listedIn;

    public String getShowId() {
        return showId;
    }

    public void setShowId(String showId) {
        this.showId = showId;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getDirector() {
        return director;
    }

    public void setDirector(String director) {
        this.director = director;
    }

    public String[] getCast() {
        return cast;
    }

    public void setCast(String[] cast) {
        this.cast = cast;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public Date getDateAdded() {
        return dateAdded;
    }

    public void setDateAdded(Date dateAdded) {
        this.dateAdded = dateAdded;
    }

    public int getReleaseYear() {
        return releaseYear;
    }

    public void setReleaseYear(int releaseYear) {
        this.releaseYear = releaseYear;
    }

    public String getRating() {
        return rating;
    }

    public void setRating(String rating) {
        this.rating = rating;
    }

    public String getDuration() {
        return duration;
    }

    public void setDuration(String duration) {
        this.duration = duration;
    }

    public String[] getListedIn() {
        return listedIn;
    }

    public void setListedIn(String[] listedIn) {
        this.listedIn = listedIn;
    }

    public Show() {
        this.showId = "NaN";
        this.type = "NaN";
        this.title = "NaN";
        this.director = "NaN";
        this.cast = new String[]{"NaN"};
        this.country = "NaN";
        this.dateAdded = null;
        this.releaseYear = -1;
        this.rating = "NaN";
        this.duration = "NaN";
        this.listedIn = new String[]{"NaN"};
    }

    public Show(String showId, String type, String title, String director, String[] cast, String country, String dateAdded, int releaseYear, String rating, String duration, String[] listedIn) {
        this.showId = (showId != null && !showId.isEmpty()) ? showId : "NaN";
        this.type = (type != null && !type.isEmpty()) ? type : "NaN";
        this.title = (title != null && !title.isEmpty()) ? title : "NaN";
        this.director = (director != null && !director.isEmpty()) ? director : "NaN";
        this.cast = (cast != null && cast.length >= 0) ? cast : new String[]{"NaN"};
        this.country = (country != null && country.isEmpty()) ? country : "NaN";
        SimpleDateFormat data = new SimpleDateFormat("MMMM dd, yyyy");
        if (dateAdded != null && !dateAdded.isEmpty()) {
            try {
                this.dateAdded = data.parse(dateAdded);
            } catch (ParseException e) {
                System.out.println("Erro ao adicionar a data");
                this.dateAdded = null;
            }
        } else {
            this.dateAdded = null;
        }
        this.releaseYear = (releaseYear > 0) ? releaseYear : -1;
        this.duration = (duration != null && !duration.isEmpty()) ? duration : "NaN";
        this.listedIn = (listedIn != null && listedIn.length >= 0) ? listedIn : new String[]{"NaN"};
    }

    public void imprimir() {
        SimpleDateFormat data = new SimpleDateFormat("MMMM d, yyyy");
        System.out.print("=> " + getShowId());
        System.out.print(" ## " + getTitle());
        System.out.print(" ## " + getType());
        System.out.print(" ## " + getDirector());
        System.out.print(" ## " + Arrays.toString(getCast()));
        System.out.print(" ## " + getCountry());
        System.out.print(" ## " + (getDateAdded() != null ? data.format(getDateAdded()) : "NaN"));
        System.out.print(" ## " + (getReleaseYear() != -1 ? getReleaseYear() : "NaN"));
        System.out.print(" ## " + getRating());
        System.out.print(" ## " + getDuration());
        System.out.println(" ## " + Arrays.toString(getListedIn()) + " ##");
    }

    public static ArrayList<Show> ler() {
        ArrayList<Show> listaShow = new ArrayList<>();
        try (BufferedReader r = new BufferedReader(new FileReader("/tmp/disneyplus.csv"))) {
            String linha = "";
            r.readLine();
            while ((linha = r.readLine()) != null) {
                Show show = new Show();
                show.atribuir(linha);
                listaShow.add(show);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return listaShow;
    }

    public void atribuir(String linha) {
        String[] str = new String[11];
        Arrays.fill(str, "");
        str = separarLinha(linha);
        SimpleDateFormat formato = new SimpleDateFormat("MMMM dd, yyyy", Locale.ENGLISH);

        setShowId((str[0] != null) ? str[0] : "NaN");
        setType((str[1] != null) ? str[1] : "NaN");
        setTitle((str[2] != null) ? str[2] : "NaN");
        setDirector((str[3] != null) ? str[3] : "NaN");
        if (str[4] != null) {
            setCast(ordenaArray(str[4]));
        } else {
            setCast(new String[]{"NaN"});
        }
        setCountry((str[5] != null) ? str[5] : "NaN");
        try {
            if (str[6] != null && !str[6].isEmpty()) {
                Date data = formato.parse(str[6]);
                setDateAdded(data);
            } else if (str[6] == null) {
                Date data = formato.parse("March 1, 1900");
                setDateAdded(data);
            }
        } catch (Exception e) {
            System.out.println("Erro ao adicionar a data: " + str[6]);
            this.dateAdded = null;
        }
        setReleaseYear((str[7] != null) ? Integer.parseInt(str[7]) : -1);
        setRating((str[8] != null) ? str[8] : "NaN");
        setDuration((str[9] != null) ? str[9] : "NaN");
        if (str[10] != null) {
            setListedIn(ordenaArray(str[10]));
        } else {
            setListedIn(new String[]{"NaN"});
        }
    }

    public static String[] ordenaArray(String str) {
        int temp = 0, tam = 0;
        for (int i = 0; i < str.length(); i++) {
            if (str.charAt(i) == ',') {
                tam++;
            }
        }

        String[] array = new String[tam + 1];
        Arrays.fill(array, "");

        for (int i = 0; i < str.length(); i++) {
            if (str.charAt(i) != ',') {
                array[temp] += str.charAt(i);
            } else if (str.charAt(i) == ',') {
                i++; // para retirar o espaço extra
                temp++;
            }

        }

        for (int i = array.length - 1; i > 0; i--) {
            for (int j = 0; j < i; j++) {
                if (array[j].compareTo(array[j + 1]) > 0) {
                    String aux = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = aux;
                }
            }
        }
        return array;
    }

    public static String[] separarLinha(String linha) {
        String[] str = new String[11];
        Arrays.fill(str, "");
        int aux = 0, i = 0;
        while (i < linha.length() && aux != 11) {
            char letra = linha.charAt(i);
            char letra2 = 'c';
            if (i + 1 < linha.length()) {
                letra2 = linha.charAt(i + 1);
            }
            if (letra == ',' && letra2 != ' ') {
                if (str[aux] == "") {
                    str[aux] = null;
                }
                aux++;
            } else {
                if (letra != '"') {
                    str[aux] += letra;
                } else {
                    i++;
                    letra = linha.charAt(i);
                    while (i < linha.length() && linha.charAt(i) != '"') {
                        str[aux] += letra;
                        i++;
                        letra = linha.charAt(i);
                    }
                }
            }
            i++;
        }
        return str;
    }

    public Show clone() {
        Show copia = new Show();
        copia.setShowId(this.showId);
        copia.setType(this.type);
        copia.setTitle(this.title);
        copia.setDirector(this.director);
        copia.setCast(Arrays.copyOf(this.cast, this.cast.length));
        copia.setCountry(this.country);
        copia.setDateAdded(this.dateAdded != null ? new Date(this.dateAdded.getTime()) : null);
        copia.setReleaseYear(this.releaseYear);
        copia.setRating(this.rating);
        copia.setDuration(this.duration);
        copia.setListedIn(Arrays.copyOf(this.listedIn, this.listedIn.length));
        return copia;
    }
    
    public static void swap(ListaDupla lista, int a, int b){
        Show temp = lista.pegar(a);
        lista.set(a, lista.pegar(b));
        lista.set(b, temp);
    }
    
    public static int comparaMenor(ListaDupla lista, int i, Show pivo){
        Date dataArray = lista.pegar(i).getDateAdded();
        Date dataPivo = pivo.getDateAdded();
        
        Calendar cal = Calendar.getInstance();
        Calendar cal2 = Calendar.getInstance();
        
        cal.setTime(dataArray);
        cal2.setTime(dataPivo);
        
        int diaArray = cal.get(Calendar.DAY_OF_MONTH);
        int mesArray = cal.get(Calendar.MONTH) + 1;
        int anoArray = cal.get(Calendar.YEAR);
        
        int diaPivo = cal2.get(Calendar.DAY_OF_MONTH);
        int mesPivo = cal2.get(Calendar.MONTH) + 1;
        int anoPivo = cal2.get(Calendar.YEAR);
        
        if(anoArray < anoPivo){
            return 1;
        }else if(anoArray == anoPivo && mesArray < mesPivo){
            return 1;
        }else if(anoArray == anoPivo && mesArray == mesPivo && diaArray < diaPivo){
            return 1;
        }else if(anoArray == anoPivo && mesArray == mesPivo && diaArray == diaPivo && lista.pegar(i).getTitle().compareToIgnoreCase(pivo.getTitle()) < 0){
            return 1;
        }
        return 0;
    }
    
    public static int comparaMaior(ListaDupla lista, int i, Show pivo){
        Date dataArray = lista.pegar(i).getDateAdded();
        Date dataPivo = pivo.getDateAdded();
        
        Calendar cal = Calendar.getInstance();
        Calendar cal2 = Calendar.getInstance();
        
        cal.setTime(dataArray);
        cal2.setTime(dataPivo);
        
        int diaArray = cal.get(Calendar.DAY_OF_MONTH);
        int mesArray = cal.get(Calendar.MONTH) + 1;
        int anoArray = cal.get(Calendar.YEAR);
        
        int diaPivo = cal2.get(Calendar.DAY_OF_MONTH);
        int mesPivo = cal2.get(Calendar.MONTH) + 1;
        int anoPivo = cal2.get(Calendar.YEAR);
        
        if(anoArray > anoPivo){
            return 1;
        }else if(anoArray == anoPivo && mesArray > mesPivo){
            return 1;
        }else if(anoArray == anoPivo && mesArray == mesPivo && diaArray > diaPivo){
            return 1;
        }else if(anoArray == anoPivo && mesArray == mesPivo && diaArray == diaPivo && lista.pegar(i).getTitle().compareToIgnoreCase(pivo.getTitle()) > 0){
            return 1;
        }
        return 0;
    }
    
    public static void quicksort(ListaDupla lista, int esq, int dir, int[] comparacoes, int[] movimentacoes){
        int i = esq, j = dir, resp;
        Show pivo = lista.pegar((dir+esq)/2);
        
        while(i <= j){
            while((resp = comparaMenor(lista, i, pivo)) != 0){
                i++;
                comparacoes[0]++;
            }
            comparacoes[0]++;
            while((resp = comparaMaior(lista, j, pivo)) != 0){
                j--;
                comparacoes[0]++;
            }
            comparacoes[0]++;
            if(i <= j){
                swap(lista, i, j);
                movimentacoes[0] += 3;
                i++;
                j--;
            }
        }
        if(esq < j){
            quicksort(lista, esq, j, comparacoes, movimentacoes);
        }
        if(i < dir){
            quicksort(lista, i, dir, comparacoes, movimentacoes);
        }
    }
    
    public static void arquivoLog(double duracao, int[] comparacoes, int[] movimentacoes){
        String matricula = "1543790";
        try {
            PrintWriter w = new PrintWriter(matricula + "_quicksort3.txt");
            w.printf("%s\t%d\t%d\t%fms", matricula, comparacoes[0], movimentacoes[0], duracao);
            w.close();
        } catch (IOException e) {
            System.err.println("Erro para escrever no arquivo de log: " + e.getMessage());
        }
    }
 
    public static void main(String[] args) {
        int[] comparacoes = new int[1];
        int[] movimentacoes = new int[1];
        int j = 0;
        Scanner input = new Scanner(System.in);
        ArrayList<Show> listaShow = ler();
        String id = "";
        ListaDupla lista = new ListaDupla();
        
        id = input.nextLine();
        while (!id.equals("FIM")) {
            for (int i = 0; i < listaShow.size(); i++) {
                if (listaShow.get(i).getShowId().equals(id)) {
                    lista.inserirFim(listaShow.get(i));
                    j++;
                }
            }
            id = input.nextLine();
        }
        long inicioTempo = System.nanoTime();
        quicksort(lista, 0, j-1, comparacoes, movimentacoes);
        for(int i = 0; i < j; i++){
            lista.pegar(i).imprimir();
        }
        
        long fimTempo = System.nanoTime();
        double duracao = (fimTempo - inicioTempo) / 1_000_000.0; // em milisegundos
        //Escrever no arquivo de log
        arquivoLog(duracao, comparacoes, movimentacoes);
        input.close();
    }
}
