#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<time.h>

#define MAX 200
#define MAX_LIST 11
#define PATH "/tmp/disneyplus.csv"

typedef struct Show {
	char showId[MAX];
	char type[MAX];
	char title[MAX];
	char director[MAX];
	char cast[MAX_LIST][MAX];
	char country[MAX];
	char dateAdded[MAX];
	int releaseYear;
	char rating[MAX];
	char duration[MAX];
	char listedIn[MAX_LIST][MAX];
} Show;

Show newShow();
Show *ler();
void atribuir(Show *show, char *linha, int index);
char **separarLinha(char *linha);
char **separarLista(char *lista);
void ordenarLista(char **lista);
void imprimir(Show show);
int quantidade();
int PesquisaBinaria(Show vet[], int tam, char titulo[], int comparacoes[]);
void ordenaVetorDeShow(Show vetor[], int tam);

typedef struct ListaLinear{
    int max;
    Show *array;
    int n;
}ListaLinear;

Show pegar(ListaLinear* lista, int pos);
Show procurar(Show* show, int tam, char id[]);
Show remover(ListaLinear* lista, int pos);
void inserir(ListaLinear* lista, Show elem, int pos);
Show removerFim(ListaLinear* lista);
Show removerInicio(ListaLinear* lista);
void inserirFim(ListaLinear* lista, Show elem);
void inserirInicio(ListaLinear* lista, Show elem);
ListaLinear* newListaLinear(int max);
void delListaLinear(ListaLinear* lista);

Show newShow() {
	Show show;
	strcpy(show.showId, "NaN");
	strcpy(show.type, "NaN");
	strcpy(show.title, "NaN");
	strcpy(show.director, "NaN");
	strcpy(show.cast[0], "NaN");
	for (int i = 1; i < MAX_LIST; i++) {
		show.cast[i][0] = '\0';
	}
	strcpy(show.country, "NaN");
	strcpy(show.dateAdded, "NaN");
	show.releaseYear = -1;
	strcpy(show.rating, "NaN");
	strcpy(show.duration, "NaN");
	strcpy(show.listedIn[0], "NaN");
	for (int i = 1; i < MAX_LIST; i++) {
		show.listedIn[i][0] = '\0';
	}
	return show;
}

int quantidade() {
	int cont = 0;
	FILE *arq = fopen(PATH, "r");
	char linha[1500];
	if (arq) {
		fgets(linha, sizeof(linha), arq);
		while (fgets(linha, sizeof(linha), arq)) {
			cont++;
		}
	} else {
		printf("Erro ao abrir o arquivo!");
	}
	fclose(arq);
	return cont;
}

Show *ler() {
	int i = 0;
	int quant = quantidade();
	Show *show = (Show*)malloc(quant * sizeof(Show));
	FILE *arq = fopen(PATH, "r");
	char linha[1500];
	if (arq) {
		fgets(linha, sizeof(linha), arq);
		while (fgets(linha, sizeof(linha), arq)) {
			atribuir(show, linha, i);
			i++;
		}
	} else {
		printf("Erro ao abrir o arquivo!");
	}
	fclose(arq);
	return show;
}

void atribuir(Show *show, char *linha, int index) {
	show[index] = newShow();
	char **str = separarLinha(linha);
	strcpy(show[index].showId, str[0]);
	if (strlen(str[1]) > 0) {
		strcpy(show[index].type, str[1]);
	} else {
		strcpy(show[index].type, "NaN");
	}
	if (strlen(str[2]) > 0) {
		strcpy(show[index].title, str[2]);
	} else {
		strcpy(show[index].title, "NaN");
	}
	if (strlen(str[3]) > 0) {
		strcpy(show[index].director, str[3]);
	} else {
		strcpy(show[index].director, "NaN");
	}
	if (strlen(str[4]) > 0) {
		char **lista = separarLista(str[4]);
		for (int i = 0; i < MAX_LIST && lista[i][0] != '\0'; i++) {
			strcpy(show[index].cast[i], lista[i]);
		}

		for (int i = 0; i < MAX_LIST; i++) {
			free(lista[i]);
		}
		free(lista);
	} else {
		strcpy(show[index].cast[0], "NaN");
		for (int i = 1; i < MAX_LIST; i++) {
			show[index].cast[i][0] = '\0';
		}
	}
	if (strlen(str[5]) > 0) {
		strcpy(show[index].country, str[5]);
	} else {
		strcpy(show[index].country, "NaN");
	}
	if (strlen(str[6]) > 0) {
		strcpy(show[index].dateAdded, str[6]);
	} else {
		strcpy(show[index].dateAdded, "March 1, 1900");
	}
	show[index].releaseYear = atoi(str[7]);
	if (strlen(str[8]) > 0) {
		strcpy(show[index].rating, str[8]);
	} else {
		strcpy(show[index].rating, "NaN");
	}
	if (strlen(str[9]) > 0) {
		strcpy(show[index].duration, str[9]);
	} else {
		strcpy(show[index].duration, "NaN");
	}
	if (strlen(str[10]) > 0) {
		char **lista = separarLista(str[10]);
		for (int i = 0; i < MAX_LIST && lista[i][0] != '\0'; i++) {
			strcpy(show[index].listedIn[i], lista[i]);
		}

		for (int i = 0; i < MAX_LIST; i++) {
			free(lista[i]);
		}
		free(lista);
	} else {
		strcpy(show[index].listedIn[0], "NaN");
		for (int i = 1; i < MAX_LIST; i++) {
			show[index].listedIn[i][0] = '\0';
		}
	}
	for (int i = 0; i < MAX_LIST; i++) {
		free(str[i]);
	}
	free(str);
}

char **separarLista(char *lista) {
	char **str = (char**)malloc(MAX_LIST * sizeof(char*));
	for (int k = 0; k < MAX_LIST; k++) {
		str[k] = (char*)malloc((MAX + 1) * sizeof(char));
		str[k][0] = '\0';
	}

	int i = 0, j = 0, pos = 0;
	while (lista[i] != '\0') {
		if (lista[i] != ',') {
			str[pos][j] = lista[i];
			j++;
		} else {
			str[pos][j] = '\0';
			pos++;
			j = 0;
			if (lista[i + 1] == ' ') { // para pular o espaco
				i++;
			}
		}
		i++;
	}
	str[pos][j] = '\0';
	ordenarLista(str);
	return str;
}

void imprimir(Show show) {
	int i = 0;
	printf("=> %s ## ", show.showId);
	printf("%s ## ", show.title);
	printf("%s ## ", show.type);
	printf("%s ## ", show.director);
	printf("[");
	while (show.cast[i][0] != '\0') {
		printf("%s", show.cast[i]);
		if (show.cast[i + 1][0] != '\0') {
			printf(", ");
		}
		i++;
	}
	printf("] ## ");
	printf("%s ## ", show.country);
	printf("%s ## ", show.dateAdded);
	printf("%d ## ", show.releaseYear);
	printf("%s ## ", show.rating);
	printf("%s ## ", show.duration);
	printf("[");
	i = 0;
	while (show.listedIn[i][0] != '\0') {
		printf("%s", show.listedIn[i]);
		if (show.listedIn[i + 1][0] != '\0') {
			printf(", ");
		}
		i++;
	}
	printf("] ##");
	printf("\n");
}

void ordenarLista(char **lista) {
	char temp[MAX];
	int tam = 0;
	while (lista[tam][0] != '\0') {
		tam++;
	}
	tam--;
	for (int i = tam; i > 0; i--) {
		for (int j = 0; j < i; j++) {
			if (strcmp(lista[j], lista[j + 1]) > 0) {
				strcpy(temp, lista[j]);
				strcpy(lista[j], lista[j + 1]);
				strcpy(lista[j + 1], temp);
			}
		}
	}
}

char **separarLinha(char *linha) {
	char **str = (char**)malloc(MAX_LIST * sizeof(char*));
	for (int k = 0; k < MAX_LIST; k++) {
		str[k] = (char*)malloc((MAX + 1) * sizeof(char));
		str[k][0] = '\0';
	}

	int aux = 0, i = 0, j = 0;
	while (i < strlen(linha) && aux < 11) {
		char letra = linha[i];
		char letra2;
		if (i + 1 < strlen(linha)) {
			letra2 = linha[i + 1];
		}
		if (letra == ',' && letra2 != ' ') {
			str[aux][j] = '\0';
			aux++;
			j = 0;
		} else {
			if (letra != '"') {
				str[aux][j] = letra;
				j++;
			} else {
				i++;
				letra = linha[i];
				while (i < strlen(linha) && linha[i] != '"') {
					str[aux][j] = letra;
					j++;
					i++;
					letra = linha[i];
				}
			}
		}
		i++;
	}
	if (j > 0 && aux < MAX_LIST) {
		str[aux][j] = '\0';
	}
	return str;
}

//*****//

ListaLinear* newListaLinear(int max){
    ListaLinear *lista = (ListaLinear*) malloc(sizeof(ListaLinear));
    lista->max = max;
    lista->n = 0;
    lista->array = (Show*)malloc(max*sizeof(Show));
    return lista;
}

void delListaLinear(ListaLinear* lista){
    if(lista != NULL){
        free(lista->array);
        free(lista);
    }
}
    
void inserirInicio(ListaLinear* lista, Show elem){
    if(lista->n >= lista->max){
        printf("Erro!");
        return; 
    }
    for(int i = lista->n; i > 0; i--){
        lista->array[i] = lista->array[i-1];
    }
    lista->array[0] = elem;
    lista->n++;
}    

void inserirFim(ListaLinear* lista, Show elem){
    if(lista->n >= lista->max){
        printf("Erro!");
        return; 
    }
    lista->array[lista->n++] = elem;
}

Show removerInicio(ListaLinear* lista){
    if(lista->n == 0){
        printf("Erro!");
        return newShow();
    }
    Show x = lista->array[0];
    for(int i = 0; i < lista->n; i++){
        lista->array[i] = lista->array[i+1];
    }
    lista->n--;
    return x;
}

Show removerFim(ListaLinear* lista){
    if(lista->n == 0){
        printf("Erro!");
        return newShow();
    }
    lista->n--;
    Show x = lista->array[lista->n];
    return x;
}

void inserir(ListaLinear* lista, Show elem, int pos){
    if(lista->n >= lista->max || pos < 0 || pos > lista->n){
        printf("Erro!");
        return;
    }
    for(int i = lista->n; i > pos; i--){
        lista->array[i] = lista->array[i-1];
    }
    lista->array[pos] = elem;
    lista->n++;
}

Show remover(ListaLinear* lista, int pos){
    if(lista->n >= lista->max || pos < 0 || pos >= lista->n){
        printf("Erro!");
        return newShow();
    }
    Show x = lista->array[pos];
    for(int i = pos; i < lista->n-1; i++){
        lista->array[i] = lista->array[i+1];
    }
    lista->n--;
    return x;
}

Show procurar(Show* show, int tam, char id[]){
    for (int i = 0; i < tam; i++) {
        if (strcmp(show[i].showId, id) == 0) {
                
            return show[i];
        }
    }
    return newShow();
}

Show pegar(ListaLinear* lista, int pos){
    return lista->array[pos];
}

int main() {
	int contIds = 0;
	Show *show = ler();
	int quant = quantidade();
	char id[MAX_LIST];
	char titulo[MAX];
	ListaLinear* lista = newListaLinear(1000);

	scanf("%[^\n]", id);
	getchar();
	while (strcmp(id, "FIM") != 0) {
		for (int i = 0; i < quant; i++) {
			if (strcmp(id, show[i].showId) == 0) {
				inserirFim(lista, show[i]);
			}
		}
		scanf("%[^\n]", id);
		getchar();
	}

	ListaLinear* listaRemovidos = newListaLinear(1000);
	int n;
	scanf("%d", &n);
	for(int i = 0; i < n; i++) {
		char comando[5];
		int pos;
		scanf("%s", comando);
        
		if(strcmp(comando, "II")== 0) {
            scanf(" %s", id);
            inserirInicio(lista, procurar(show, quant, id));
		} else if(strcmp(comando, "IF") == 0) {
            scanf(" %s", id);
            inserirFim(lista, procurar(show, quant, id));
		} else if(strcmp(comando, "I*") == 0) {
            scanf("%d %s", &pos, id);
            inserir(lista, procurar(show, quant, id), pos);
		} else if(strcmp(comando, "RI") == 0) {
            Show removido = removerInicio(lista);
            inserirFim(listaRemovidos, removido);
		} else if(strcmp(comando, "RF") == 0) {
		    Show removido = removerFim(lista);
            inserirFim(listaRemovidos, removido);
		} else if(strcmp(comando, "R*") == 0) {
            scanf("%d", &pos);
            Show removido = remover(lista, pos);
            inserirFim(listaRemovidos, removido);
		}
	}
	
    for(int i = 0; i < listaRemovidos->n; i++){
        Show item = pegar(listaRemovidos, i);
        printf("(R) %s\n", item.title);
    }
    
    for(int i = 0; i < lista->n; i++){
        imprimir(pegar(lista, i));
    }
	free(show);
	delListaLinear(lista);
	delListaLinear(listaRemovidos);
	return 0;
}
